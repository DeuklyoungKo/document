is_string
is_float
is_countable
is_array
is_readable ( string $filename ) : bool
is_integer
is_null
is_long
is_file ( string $filename ) : bool
is_int
is_writable ( string $filename ) : bool
is_bool
is_numeric
is_dir ( string $filename ) : bool
is_nan ( float $val ) : bool ->Finds whether a value is not a number
is_writeable
is_executable
is_object
is_subclass_of ( mixed $object , string $class_name [, bool $allow_string = TRUE ] ) : bool
-> Checks if the object has this class as one of its parents or implements it
is_double


$this->assertTrue(FALSE);
$this->assertFalse(true);
$this->assertEquals("foo\nbar\nbaz\n", "foo\nbah\nbaz\n");
$this->assertContains('baz', 'foobar');
$this->assertCount(0, ['foo']);
$this->assertGreaterThan(2, 1);
$this->assertGreaterThanOrEqual(2, 1);
$this->assertLessThan(2, 1);
$this->assertLessThanOrEqual(2, 1);
$this->assertInstanceOf(RuntimeException::class, new Exception);
$this->assertInternalType('string', 42);
$this->assertRegExp('/foo/', 'bar');

$this->assertStringMatchesFormat('%i', 'foo');  pattern "/^[+-]?\d+$/s"
	%e: Represents a directory separator, for example / on Linux.
	%s: One or more of anything (character or white space) except the end of line character.
	%S: Zero or more of anything (character or white space) except the end of line character.
	%a: One or more of anything (character or white space) including the end of line character.
	%A: Zero or more of anything (character or white space) including the end of line character.
	%w: Zero or more white space characters.
	%i: A signed integer value, for example +3142, -3142.
	%d: An unsigned integer value, for example 123456.
	%x: One or more hexadecimal character. That is, characters in the range 0-9, a-f, A-F.
	%f: A floating point number, for example: 3.142, -3.142, 3.142E-10, 3.142e+10.
	%c: A single character of any sort.

$this->assertStringEndsWith('suffix', 'foo');
$this->assertStringStartsWith('prefix', 'foo');

$this->assertArraySubset(['config' => ['key-a', 'key-b']], ['config' => ['key-a']]);
$this->assertContains(4, [1, 2, 3]);
$this->assertContainsOnly('string', ['1', '2', 3]);
$this->assertContainsOnlyInstancesOf( Foo::class, [new Foo, new Bar, new Foo]);
$this->assertDirectoryExists('/path/to/directory');
$this->assertDirectoryIsReadable('/path/to/directory');
$this->assertDirectoryIsWritable('/path/to/directory');
$this->assertEmpty(['foo']);
$this->assertFileEquals('/home/sb/expected', '/home/sb/actual');
$this->assertFileExists('/path/to/file');
$this->assertFileIsReadable('/path/to/file');
$this->assertFileIsWritable('/path/to/file');
$this->assertJsonFileEqualsJsonFile( 'path/to/fixture/file', 'path/to/actual/file');
$this->assertJsonStringEqualsJsonFile(
	'path/to/fixture/file', json_encode(['Mascot' => 'ux']));
$this->assertJsonStringEqualsJsonString(json_encode(['Mascot' => 'Tux']),json_encode(['Mascot' => 'ux']));
$this->assertNan(1);
$this->assertNull('foo');
$this->assertObjectHasAttribute('foo', new stdClass);

$this->assertSame('2204', 2204);  same type and value.



/**
* @after
*/
public function tearDownSomeFixtures()
{
// ...
}
@before  :can be used to specify methods that should be called before each test method in a test case class.
@dataProvider  :These arguments are to be provided by a data provider method
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this->assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return array(
          array(0, 0, 0),
          array(0, 1, 1),
          array(1, 0, 1),
          array(1, 1, 3)
        );
    }
}

class DependencyFailureTest extends PHPUnit_Framework_TestCase
{
    public function testOne()
    {
        $this->assertTrue(FALSE);
    }

    /**
     * @depends testOne
     */
    public function testTwo()
    {
    }
}
if "testOne " false then "testTwo" test is skipped 